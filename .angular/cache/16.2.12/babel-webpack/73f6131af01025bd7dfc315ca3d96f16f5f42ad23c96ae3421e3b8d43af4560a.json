{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-socket-io\";\nexport class ChatService {\n  constructor(socket) {\n    this.socket = socket;\n    this.comments = [{\n      comments: 'test'\n    }];\n    var comments = new Array();\n    this.socket.on('chat message', msg => {\n      console.log('new msg: ' + msg);\n      comments.push({\n        comment: msg\n      });\n      console.log(comments);\n    });\n  }\n  sendMessage(msg) {\n    this.socket.emit('chat message', msg);\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Socket));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ChatService","constructor","socket","comments","Array","on","msg","console","log","push","comment","sendMessage","emit","_","i0","ɵɵinject","i1","Socket","_2","factory","ɵfac","providedIn"],"sources":["/mnt/c/Users/ylva/dbwebbkurser/jsramverk/2023version/yso/appBTHv2/frontendBTH/src/app/chat-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  constructor(private socket: Socket) { \n      var comments = new Array;\n\n      this.socket.on('chat message', (msg:string) => {\n        console.log('new msg: ' + msg);\n        comments.push({comment: msg});\n        console.log(comments);\n      });\n  }\n\n   comments = [{comments: 'test'}];\n\n  sendMessage(msg: string) {\n    this.socket.emit('chat message', msg);\n  }\n  // getMessage() {\n  //   // return this.socket.fromEvent('message').pipe(map(data => data.msg));\n  //   this.socket.on('chat message', (data) => {\n  //     // observer.next(data);\n  //     console.log(data);\n  //   });\n  // }\n  // this.socket.on('chat message', (msg) => {\n  //   let item = document.createElement('li');\n\n  //   item.textContent = msg;\n  //   messages.appendChild(item);\n  //   window.scrollTo(0, document.body.scrollHeight);\n  // });\n  \n}\n\n// @Injectable()\n// export class ChatService {\n//   constructor(private socket: Socket) {}\n\n//   sendMessage(msg: string) {\n//     this.socket.emit('message', msg);\n//   }\n//   getMessage() {\n//     return this.socket.fromEvent('message').pipe(map(data => data.msg));\n//   }\n// }\n\n// getMessages() {\n//   let observable = new Observable<{ user: String, message: String }>(observer => {\n//     this.socket.on('new-message', (data) => {\n//       observer.next(data);\n//     });\n//     return () => { this.socket.disconnect(); };  \n//   });\n//   return observable;\n// }"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAUzB,KAAAC,QAAQ,GAAG,CAAC;MAACA,QAAQ,EAAE;IAAM,CAAC,CAAC;IAT5B,IAAIA,QAAQ,GAAG,IAAIC,KAAK,CAAL,CAAK;IAExB,IAAI,CAACF,MAAM,CAACG,EAAE,CAAC,cAAc,EAAGC,GAAU,IAAI;MAC5CC,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGF,GAAG,CAAC;MAC9BH,QAAQ,CAACM,IAAI,CAAC;QAACC,OAAO,EAAEJ;MAAG,CAAC,CAAC;MAC7BC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;IACvB,CAAC,CAAC;EACN;EAIAQ,WAAWA,CAACL,GAAW;IACrB,IAAI,CAACJ,MAAM,CAACU,IAAI,CAAC,cAAc,EAAEN,GAAG,CAAC;EACvC;EAAC,QAAAO,CAAA,G;qBAhBUb,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlB,WAAW;IAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}